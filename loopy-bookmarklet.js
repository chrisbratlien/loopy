
javascript:(function(){
var _a;var elmnt, pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0, slider, statusA, statusB, statusC, nA, nB, btnA, btnB, mapKeyToElement;function dragMouseDown(e) {    e = e || window.event;    e.preventDefault();    pos3 = e.clientX;    pos4 = e.clientY;    document.onmouseup = closeDragElement;    document.onmousemove = elementDrag;}function elementDrag(e) {    e = e || window.event;    e.preventDefault();    pos1 = pos3 - e.clientX;    pos2 = pos4 - e.clientY;    pos3 = e.clientX;    pos4 = e.clientY;    elmnt.style.top = (elmnt.offsetTop - pos2) + "px";    elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";}function closeDragElement() {    document.onmouseup = null;    document.onmousemove = null;}var media = document.querySelector('audio') || document.querySelector('video');if (!media) {    alert('No audio or video element found. Try again later when you have something playing');}var origPBR = media.playbackRate;var wrap = document.createElement('div');elmnt = wrap;var label = document.createElement('label');label.style = 'padding: 0 20px; min-width: 20px;';label.innerText = 1.0;wrap.style = "\n    background: white; \n    border: 1px solid #888;\n    position: absolute; \n    left: 30%; \n    right: 70%; \n    top: 80px; \n    width: 40%; \n    z-index: 1000;\n";var dragMe = document.createElement('label');dragMe.innerText = 'dragMe';var BSD;BSD = {    A: false,    B: false};BSD.loopTimeout = false;BSD.backToA = function () {    console.log('bTA before pbR', media.playbackRate);    media.currentTime = (BSD.A || 0);    console.log('bTA after pbR', media.playbackRate);    updateLoopTimeout();};BSD.keycodes = {    TAB: 9,    "RETURN": 13,    ENTER: 13,    SPACE: 32,    LEFT: 37,    UP: 38,    RIGHT: 39,    DOWN: 40,    PERIOD: 46,    a: 65,    b: 66,    LEFT_BRACKET: 219,    RIGHT_BRACKET: 221};var blinkOnceTimeout = 0;function blinkOnce(elem) {    var foundInline = elem.style.backgroundColor.length > 0;    var saveBGC = foundInline ?        elem.style.backgroundColor :        window.getComputedStyle(elem)            .getPropertyValue('background-color');    elem.style.backgroundColor = 'white';    clearTimeout(blinkOnceTimeout);    setTimeout(function () {        elem.style.backgroundColor = saveBGC;    }, 100);}function handleKeys(e) {    var c = e.keyCode || e.which;    if (c == BSD.keycodes.a) {        setLoopStart(media.currentTime);    }    if (c == BSD.keycodes.b) {        setLoopEnd(media.currentTime);    }    if (c == BSD.keycodes.LEFT_BRACKET) {        nudgeLoopStart();    }    if (c == BSD.keycodes.RIGHT_BRACKET) {        nudgeLoopEnd();    }    var elemToBlink = mapKeyToElement[c];    if (elemToBlink) {        blinkOnce(elemToBlink);    }}document.addEventListener('keydown', handleKeys);function updateLoopTimeout() {    console.log('uLT pbR', media.playbackRate);    var end = BSD.B || media.duration;    var when = (end - media.currentTime) * 1 / media.playbackRate;    console.log({ end: end, when: when, a: BSD.A, b: BSD.B });    if (isNaN(when)) {        return console.log('when isNaN');    }    if (BSD.A > BSD.B) {        return console.log('A > B');    }    if (BSD.B < BSD.A) {        return console.log('B < A');    }    clearTimeout(BSD.loopTimeout);    BSD.loopTimeout = setTimeout(BSD.backToA, when * 1000);}function round3(x) {    return Math.round(x * 1000) / 1000;}function updateStatus() {    statusA.innerText = round3(BSD.A);    statusC.innerText = round3(media.currentTime);    statusB.innerText = round3(BSD.B);}function setLoopStart(secs) {    secs = parseFloat(secs);    if (secs < 0) {        secs = 0;    }    BSD.A = secs;    updateLoopTimeout();    updateStatus();}function setLoopEnd(secs) {    secs = parseFloat(secs);    var smallestAllowedLoopSeconds = 0.5;    if (secs <= BSD.A + smallestAllowedLoopSeconds) {        return false;    }    BSD.B = secs;    media.currentTime = BSD.A;    updateLoopTimeout();    updateStatus();}function nudgeLoopStart() {    BSD.A -= 1;    BSD.A = (BSD.A < 0) ? 0 : BSD.A;    updateLoopTimeout();    updateStatus();}function nudgeLoopEnd() {    BSD.B += 1;    updateLoopTimeout();    updateStatus();}var btnResume = document.createElement('button');btnResume.style = 'margin: 0 10px;';btnResume.innerText = 'resume normal playback';btnResume.onclick = function () {    clearTimeout(BSD.loopTimeout);};var btnExit = document.createElement('label');btnExit.style = "\n    position: absolute; \n    top: 0; \n    right: 0; \n    padding: 2px 5px; \n    background: black; \n    color: white;\n    cursor: pointer;\n";btnExit.innerText = 'X';btnExit.onclick = function () {    clearTimeout(BSD.loopTimeout);    media.playbackRate = origPBR;    BSD = null;    document.body.removeChild(wrap);};var db = window.localStorage;if (db) {    [0, 1, 2, 3].forEach(function (i) {        var key = 'Loopy::save' + (i + 1);        var slot = document.createElement('div');        slot.style = 'padding: 2px 5px; display: block-inline; float: left; background: #fa0; border-right: 1px solid #a50;';        var load = document.createElement('label');        load.style = ' margin: 0 2px;';        load.innerText = ((i == 0) ? 'load' : 'L') + (i + 1);        load.onclick = function () {            if (!db[key]) {                return false;            }            var loopInfo = JSON.parse(db[key]);            BSD.A = loopInfo.A;            BSD.B = loopInfo.B;            clearTimeout(BSD.loopTimeout);            media.currentTime = BSD.A;            updateLoopTimeout();        };        var save = document.createElement('label');        save.style = '';        save.innerText = ((i == 0) ? 'save' : 'S') + (i + 1);        save.onclick = function () {            var loopInfo = {                A: BSD.A,                B: BSD.B            };            db[key] = JSON.stringify(loopInfo);        };        slot.appendChild(save);        slot.appendChild(load);        wrap.appendChild(slot);    });}var markup = "\n<style>\n.flex { \n display: flex;\n}\n.flex-row {\n  flex-direction: row;\n}\n.flex-column {\n  flex-direction: column;\n}\n.loopy-wrap {\n  width: 100%;\n}\n.slider {\n  height: 20px; \n  width: 90%; \n  margin: 0 auto;\n}\n\n.status {\n  background: black;\n  justify-content: space-evenly;\n}\n.status label,\n.status div {\n  font-size: 2rem;\n  text-align: center;\n  min-width: 32%;\n}\n.status .a {\n  color: rgba(0, 255, 0, 0.5);\n}\n.status .c {\n  color: rgba(0, 255, 255, 0.5);\n}\n.status .b {\n  color: rgba(255, 0, 0, 0.5);\n}\n.controls .btn {\n   flex-grow: 1;\n}\n\n.btn {\n  background: #bbb; \n  color: #333; \n  cursor: pointer;\n  margin: 0; \n  padding: 2px 10px;\n  text-align: center;\n}\n\n.btn.a {\n  background: #6d6;\n  color: white;\n}\n.btn.b {\n  background: red;\n  color: white;\n}\n\n</style>\n<div class=\"loopy-wrap flex flex-column\">\n  <div class=\"flex flex-row\">\n    <span>playback rate</span>\n    <input class=\"slider\" type=\"range\" />  \n  </div>\n    <div class=\"status flex flex-row\">\n        <label class=\"a\">start</label>\n        <label class=\"c\">current</label>\n        <label class=\"b\">end</label>\n    </div>\n    <div class=\"controls flex flex-row\">\n        <label class=\"btn na\">[</label>\n        <label class=\"btn a\">A</label>\n        <label class=\"btn b\">B</label>\n        <label class=\"btn nb\">]</label>\n    </div>\n</div>\n";wrap.appendChild(label);wrap.insertAdjacentHTML('beforeend', markup);var slider = wrap.querySelector('.slider');slider.type = 'range';slider.min = 0.25;slider.max = 2;slider.step = 0.05;slider.value = origPBR;slider.onchange = function () {    media.playbackRate = parseFloat(this.value);    label.innerText = this.value;    updateLoopTimeout();};statusA = wrap.querySelector(' .status .a');statusC = wrap.querySelector(' .status .c');statusB = wrap.querySelector(' .status .b');media.addEventListener('timeupdate', function () {    statusC.innerText = round3(media.currentTime);});nA = wrap.querySelector('.na');nA.addEventListener('click', nudgeLoopStart);nB = wrap.querySelector('.nb');nB.addEventListener('click', nudgeLoopEnd);btnA = wrap.querySelector('.btn.a');btnA.addEventListener('click', function () { return setLoopStart(media.currentTime); });btnB = wrap.querySelector('.btn.b');btnB.addEventListener('click', function () { return setLoopEnd(media.currentTime); });mapKeyToElement = (_a = {},    _a[BSD.keycodes.a] = btnA,    _a[BSD.keycodes.b] = btnB,    _a[BSD.keycodes.LEFT_BRACKET] = nA,    _a[BSD.keycodes.RIGHT_BRACKET] = nB,    _a);wrap.append(btnResume);wrap.append(dragMe);wrap.append(btnExit);document.body.appendChild(wrap);dragMe.onmousedown = dragMouseDown;
})()
